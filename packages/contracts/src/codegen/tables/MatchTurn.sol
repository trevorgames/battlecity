// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct MatchTurnData {
  uint32 turn;
  uint32 attackPiece;
  uint32 defensePiece;
  uint256 resolvedAt;
}

library MatchTurn {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "MatchTurn", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004d617463685475726e00000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x002c040004040420000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint32, uint256)
  Schema constant _valueSchema = Schema.wrap(0x002c04000303031f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "matchEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "turn";
    fieldNames[1] = "attackPiece";
    fieldNames[2] = "defensePiece";
    fieldNames[3] = "resolvedAt";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get turn.
   */
  function getTurn(bytes32 matchEntity) internal view returns (uint32 turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get turn.
   */
  function _getTurn(bytes32 matchEntity) internal view returns (uint32 turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set turn.
   */
  function setTurn(bytes32 matchEntity, uint32 turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((turn)), _fieldLayout);
  }

  /**
   * @notice Set turn.
   */
  function _setTurn(bytes32 matchEntity, uint32 turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((turn)), _fieldLayout);
  }

  /**
   * @notice Get attackPiece.
   */
  function getAttackPiece(bytes32 matchEntity) internal view returns (uint32 attackPiece) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get attackPiece.
   */
  function _getAttackPiece(bytes32 matchEntity) internal view returns (uint32 attackPiece) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set attackPiece.
   */
  function setAttackPiece(bytes32 matchEntity, uint32 attackPiece) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackPiece)), _fieldLayout);
  }

  /**
   * @notice Set attackPiece.
   */
  function _setAttackPiece(bytes32 matchEntity, uint32 attackPiece) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackPiece)), _fieldLayout);
  }

  /**
   * @notice Get defensePiece.
   */
  function getDefensePiece(bytes32 matchEntity) internal view returns (uint32 defensePiece) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get defensePiece.
   */
  function _getDefensePiece(bytes32 matchEntity) internal view returns (uint32 defensePiece) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set defensePiece.
   */
  function setDefensePiece(bytes32 matchEntity, uint32 defensePiece) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((defensePiece)), _fieldLayout);
  }

  /**
   * @notice Set defensePiece.
   */
  function _setDefensePiece(bytes32 matchEntity, uint32 defensePiece) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((defensePiece)), _fieldLayout);
  }

  /**
   * @notice Get resolvedAt.
   */
  function getResolvedAt(bytes32 matchEntity) internal view returns (uint256 resolvedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get resolvedAt.
   */
  function _getResolvedAt(bytes32 matchEntity) internal view returns (uint256 resolvedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set resolvedAt.
   */
  function setResolvedAt(bytes32 matchEntity, uint256 resolvedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((resolvedAt)), _fieldLayout);
  }

  /**
   * @notice Set resolvedAt.
   */
  function _setResolvedAt(bytes32 matchEntity, uint256 resolvedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((resolvedAt)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 matchEntity) internal view returns (MatchTurnData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 matchEntity) internal view returns (MatchTurnData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 matchEntity, uint32 turn, uint32 attackPiece, uint32 defensePiece, uint256 resolvedAt) internal {
    bytes memory _staticData = encodeStatic(turn, attackPiece, defensePiece, resolvedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 matchEntity,
    uint32 turn,
    uint32 attackPiece,
    uint32 defensePiece,
    uint256 resolvedAt
  ) internal {
    bytes memory _staticData = encodeStatic(turn, attackPiece, defensePiece, resolvedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 matchEntity, MatchTurnData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.turn, _table.attackPiece, _table.defensePiece, _table.resolvedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 matchEntity, MatchTurnData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.turn, _table.attackPiece, _table.defensePiece, _table.resolvedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint32 turn, uint32 attackPiece, uint32 defensePiece, uint256 resolvedAt) {
    turn = (uint32(Bytes.getBytes4(_blob, 0)));

    attackPiece = (uint32(Bytes.getBytes4(_blob, 4)));

    defensePiece = (uint32(Bytes.getBytes4(_blob, 8)));

    resolvedAt = (uint256(Bytes.getBytes32(_blob, 12)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (MatchTurnData memory _table) {
    (_table.turn, _table.attackPiece, _table.defensePiece, _table.resolvedAt) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 matchEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 turn,
    uint32 attackPiece,
    uint32 defensePiece,
    uint256 resolvedAt
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(turn, attackPiece, defensePiece, resolvedAt);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 turn,
    uint32 attackPiece,
    uint32 defensePiece,
    uint256 resolvedAt
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(turn, attackPiece, defensePiece, resolvedAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 matchEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = matchEntity;

    return _keyTuple;
  }
}

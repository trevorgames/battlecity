// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct VerifierData {
  address setupVerifier;
  address moveVerifier;
  address attackVerifier;
  address defenseVerifier;
}

library Verifier {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Verifier", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000056657269666965720000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0050040014141414000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, address, address)
  Schema constant _valueSchema = Schema.wrap(0x0050040061616161000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "setupVerifier";
    fieldNames[1] = "moveVerifier";
    fieldNames[2] = "attackVerifier";
    fieldNames[3] = "defenseVerifier";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get setupVerifier.
   */
  function getSetupVerifier() internal view returns (address setupVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get setupVerifier.
   */
  function _getSetupVerifier() internal view returns (address setupVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set setupVerifier.
   */
  function setSetupVerifier(address setupVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((setupVerifier)), _fieldLayout);
  }

  /**
   * @notice Set setupVerifier.
   */
  function _setSetupVerifier(address setupVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((setupVerifier)), _fieldLayout);
  }

  /**
   * @notice Get moveVerifier.
   */
  function getMoveVerifier() internal view returns (address moveVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get moveVerifier.
   */
  function _getMoveVerifier() internal view returns (address moveVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set moveVerifier.
   */
  function setMoveVerifier(address moveVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((moveVerifier)), _fieldLayout);
  }

  /**
   * @notice Set moveVerifier.
   */
  function _setMoveVerifier(address moveVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((moveVerifier)), _fieldLayout);
  }

  /**
   * @notice Get attackVerifier.
   */
  function getAttackVerifier() internal view returns (address attackVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get attackVerifier.
   */
  function _getAttackVerifier() internal view returns (address attackVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set attackVerifier.
   */
  function setAttackVerifier(address attackVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attackVerifier)), _fieldLayout);
  }

  /**
   * @notice Set attackVerifier.
   */
  function _setAttackVerifier(address attackVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attackVerifier)), _fieldLayout);
  }

  /**
   * @notice Get defenseVerifier.
   */
  function getDefenseVerifier() internal view returns (address defenseVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get defenseVerifier.
   */
  function _getDefenseVerifier() internal view returns (address defenseVerifier) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set defenseVerifier.
   */
  function setDefenseVerifier(address defenseVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defenseVerifier)), _fieldLayout);
  }

  /**
   * @notice Set defenseVerifier.
   */
  function _setDefenseVerifier(address defenseVerifier) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defenseVerifier)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (VerifierData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (VerifierData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(address setupVerifier, address moveVerifier, address attackVerifier, address defenseVerifier) internal {
    bytes memory _staticData = encodeStatic(setupVerifier, moveVerifier, attackVerifier, defenseVerifier);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(address setupVerifier, address moveVerifier, address attackVerifier, address defenseVerifier) internal {
    bytes memory _staticData = encodeStatic(setupVerifier, moveVerifier, attackVerifier, defenseVerifier);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(VerifierData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.setupVerifier,
      _table.moveVerifier,
      _table.attackVerifier,
      _table.defenseVerifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(VerifierData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.setupVerifier,
      _table.moveVerifier,
      _table.attackVerifier,
      _table.defenseVerifier
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (address setupVerifier, address moveVerifier, address attackVerifier, address defenseVerifier)
  {
    setupVerifier = (address(Bytes.getBytes20(_blob, 0)));

    moveVerifier = (address(Bytes.getBytes20(_blob, 20)));

    attackVerifier = (address(Bytes.getBytes20(_blob, 40)));

    defenseVerifier = (address(Bytes.getBytes20(_blob, 60)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (VerifierData memory _table) {
    (_table.setupVerifier, _table.moveVerifier, _table.attackVerifier, _table.defenseVerifier) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address setupVerifier,
    address moveVerifier,
    address attackVerifier,
    address defenseVerifier
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(setupVerifier, moveVerifier, attackVerifier, defenseVerifier);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address setupVerifier,
    address moveVerifier,
    address attackVerifier,
    address defenseVerifier
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(setupVerifier, moveVerifier, attackVerifier, defenseVerifier);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
